@startuml core
package bank.core {

class Bank {
  - List<User> users
  ..
  + getInstance(): Bank
  + addUser(ssn: String, name: String, password: String): User
  + removeUser(ssn: String)
  + setUsers(users: List<User>)
  + userCheck(user: User)
  + addUser(user: User)
  + getUser(ssn: String): User
  + addAccount(user: User, account: Account)
  + getAccountByNumber(accountnumber: ssn)
  + verifyCredentials(ssn: String, password: String)
  + transfer(user: User, sourceAccount: Account, targetAccount: Account, amount: double)
  + payment(user: User, sourceAccount: Account, targetAccount: Account, amount: double)
  + deposit(user: User, account: Account, amount: double)
  + withdraw(user: User, account: Account, amount: double)
 
}
note left of Bank
    Singleton class to prevent 
    multiple bank instances
end note

class User {
  - String ssn
  - String name
  - String password
  - List<Account> accounts
  ..
  + User(ssn: String, name: String, password: String)
  + getAccounts(): List<Account>
  + getSsn(): String
  + getName(): String
  + getPassword(): String
  # addAccount(accountType: String, accountName: String): Account
  # removeAccount(account: Account)
  # ssnCheck(ssn: String)
  # passwordCheck(password: String)
  # nameCheck(name: String)
}

class Account {
  - Double balance
  - final String name
  - final String accountType
  - final long accountNumber
  - final List<String> accountTypes
  ..
  + Account(balance: Double, name: String, accountType: String)
  + getAccountNumber(): long
  + getName(): String
  + getAccountType(): String
  + getBalance(): double
  # deposit(amount: Double)
  # withdraw(amount: Double)
  - accountTypeCheck(accountType: String)
  - nameCheck(name: String)
}


Bank "1" *-- "0..*" User : has
User "1" *-- "0..3" Account : owns

@enduml